{"version":3,"sources":["../src/LinkedList/LinkedListNode.ts","../src/LinkedList/index.ts","../src/LinkedList/DoubleLinkedListNode.ts","../src/LinkedList/DoubleLinkedList.ts","../src/Queue/index.ts","../src/Stack/index.ts"],"names":["LinkedListNode","value","next","__name","LinkedList","startingNode","current","index","prev","i","cb","last","result","node","instance","values","linkedList","lastInserted","DoubleLinkedListNode","DoubleLinkedList","linkNode","newNode","removeNode","start","mid","position","removedCount","doublyLinkedList","Queue","elements","element","first","Stack"],"mappings":"+EAKA,IAAqBA,EAArB,KAAoC,CAC1B,MACA,KAAuB,KAM/B,YAAYC,EAAYC,EAAsB,CAC5C,KAAK,KAAOA,GAAc,KAC1B,KAAK,MAAQD,CACf,CAOA,SAASA,EAA4B,CACnC,YAAK,MAAQA,EACN,IACT,CAMA,UAAgB,CACd,OAAO,KAAK,KACd,CAOA,QAAQC,EAAsC,CAC5C,GAAIA,GAAQ,EAAEA,aAAgBF,GAC5B,MAAM,IAAI,MAAM,0CAA0C,EAE5D,YAAK,KAAOE,GAAQ,KACb,IACT,CAMA,SAA0B,CACxB,OAAO,KAAK,IACd,CAMA,SAAmB,CACjB,OAAO,KAAK,gBAAgBF,CAC9B,CACF,EA3DqBG,EAAAH,EAAA,kBCGrB,IAAqBI,EAArB,KAAgC,CACtB,MAAgB,EAChB,KAAuB,KAK/B,SAAmB,CACjB,OAAO,KAAK,OAAS,IACvB,CAKA,MAAe,CACb,OAAO,KAAK,KACd,CAQA,YAAYH,EAA4B,CACtC,OAAO,KAAK,SAASA,EAAO,CAAC,CAC/B,CAOA,WAAWA,EAAYI,EAA+C,CACpE,GAAKA,EACA,CACH,IAAIC,EAAUD,EACd,KAAOC,EAAQ,QAAQ,GACrBA,EAAUA,GAAS,QAAQ,EAE7B,OAAAA,EAAQ,QAAQ,IAAIN,EAAeC,EAAO,IAAI,CAAC,EAC/C,KAAK,OAAS,EACPK,EAAQ,QAAQ,CACzB,KATmB,QAAO,KAAK,SAASL,EAAO,KAAK,KAAK,CAU3D,CAQA,SAASA,EAAYM,EAA+B,CAClD,GAAIA,EAAQ,KAAK,MACf,MAAM,IAAI,MACR,wDAAwD,KAAK,OAC/D,EACK,GAAIA,EAAQ,EACjB,MAAM,IAAI,MACR,gEAAgE,KAAK,QACvE,EAEF,GAAIA,IAAU,EACZ,YAAK,KAAO,IAAIP,EAAeC,EAAO,KAAK,IAAI,EAC/C,KAAK,OAAS,EACP,KAAK,KACP,CACL,IAAIK,EAA0B,KAAK,KAC/BE,EAAuB,KAC3B,QAASC,EAAI,EAAGA,EAAIF,EAAOE,IACzBD,EAAOF,EACPA,EAAUA,EAAQ,QAAQ,EAE5B,OAAAE,EAAK,QAAQ,IAAIR,EAAeC,EAAOK,CAAO,CAAC,EAC/C,KAAK,QACEE,EAAK,QAAQ,CACtB,CACF,CAMA,YAA6B,CAC3B,OAAO,KAAK,SAAS,CAAC,CACxB,CAKA,YAA6B,CAC3B,OAAO,KAAK,SAAS,KAAK,MAAQ,CAAC,CACrC,CAIA,SAASD,EAA+B,CACtC,GAAIA,EAAQ,KAAK,MACf,MAAM,IAAI,MACR,wDAAwD,KAAK,OAC/D,EACK,GAAIA,EAAQ,EACjB,MAAM,IAAI,MACR,gEAAgE,KAAK,QACvE,EAEF,GAAI,KAAK,QAAQ,EACf,OAAO,KAET,GAAIA,IAAU,EAAG,CACf,IAAID,EAAU,KAAK,KACnB,YAAK,KAAOA,EAAQ,QAAQ,EAC5B,KAAK,QACEA,EAAQ,QAAQ,IAAI,CAC7B,KAAO,CACL,IAAIA,EAA0B,KAAK,KAC/BE,EAAuB,KAC3B,QAAS,EAAI,EAAG,EAAID,EAAO,IACzBC,EAAOF,EACPA,EAAUA,EAAQ,QAAQ,EAE5B,OAAAE,EAAK,QAAQF,GAAS,QAAQ,EAAIA,EAAQ,QAAQ,EAAI,IAAI,EAC1D,KAAK,QACEE,EAAK,QAAQ,CACtB,CACF,CAIA,UAAW,CACT,KAAK,KAAO,KACZ,KAAK,MAAQ,CACf,CAOA,QAAQE,EAAI,CACV,GAAI,OAAOA,GAAO,WAChB,MAAM,IAAI,MAAM,iCAAiC,EAGnD,IAAIJ,EAAU,KAAK,KACfC,EAAQ,EACZ,KAAOD,aAAmBN,GACxBU,EAAGJ,EAASC,CAAK,EACjBA,GAAS,EACTD,EAAUA,EAAQ,QAAQ,CAE9B,CAQA,KAAKI,EAAIL,EAAe,KAAK,KAAM,CACjC,GAAI,OAAOK,GAAO,WAChB,MAAM,IAAI,MAAM,8BAA8B,EAEhD,GAAIL,GAAgB,CAAC,KAAK,aAAaA,EAAcL,CAAc,EACjE,MAAM,IAAI,MAAM,kDAAkD,EAGpE,IAAIM,EAAUD,EACd,KAAO,KAAK,aAAaC,EAASN,CAAc,GAAG,CACjD,GAAIU,EAAGJ,CAAO,EACZ,OAAOA,EAETA,EAAUA,EAAQ,QAAQ,CAC5B,CACA,OAAO,IACT,CAQA,OAAOI,EAAI,CACT,GAAI,OAAOA,GAAO,WAChB,MAAM,IAAI,MAAM,gCAAgC,EAElD,IAAIC,EAAO,KACLC,EAAS,IAAIR,EACnB,YAAK,QAAQ,CAACS,EAAMN,IAAU,CACxB,CAACG,EAAGG,EAAMN,CAAK,IACnBI,EAAOC,EAAO,WAAWC,EAAK,SAAS,EAAGF,CAAI,EAChD,CAAC,EACMC,CACT,CAMA,SAAU,CACR,IAAMA,EAAS,CAAC,EAChB,YAAK,QAASC,GAASD,EAAO,KAAKC,EAAK,SAAS,CAAC,CAAC,EAC5CD,CACT,CAOA,aAAaX,EAAYa,EAAwB,CAC/C,OAAOb,aAAiBa,CAC1B,CASA,OAAO,UAAUC,EAAoB,CACnC,GAAI,CAAC,MAAM,QAAQA,CAAM,EACvB,MAAM,IAAI,MAAM,iDAAiD,EAEnE,IAAMC,EAAa,IAAIZ,EACnBa,EAAe,KACnB,OAAAF,EAAO,QAASd,GAAU,CACxBgB,EAAeD,EAAW,WAAWf,EAAOgB,CAAY,CAC1D,CAAC,EACMD,CACT,CACF,EAzOqBb,EAAAC,EAAA,cCHrB,IAAqBc,EAArB,KAA0C,CAChC,MACA,KAA6B,KAC7B,KAA6B,KAMrC,YACEjB,EACAC,EACAM,EACA,CACA,KAAK,KAAON,GAAc,KAC1B,KAAK,KAAOM,GAAc,KAC1B,KAAK,MAAQP,CACf,CAOA,SAASA,EAAkC,CACzC,YAAK,MAAQA,EACN,IACT,CAMA,UAAgB,CACd,OAAO,KAAK,KACd,CAOA,QAAQC,EAAkD,CACxD,GAAIA,GAAQ,EAAEA,aAAgBgB,GAC5B,MAAM,IAAI,MAAM,gDAAgD,EAElE,YAAK,KAAOhB,GAAQ,KACb,IACT,CAMA,SAAgC,CAC9B,OAAO,KAAK,IACd,CAMA,SAAmB,CACjB,OAAO,KAAK,gBAAgBgB,CAC9B,CAMA,QAAQV,EAAkD,CACxD,GAAIA,GAAQ,EAAEA,aAAgBU,GAC5B,MAAM,IAAI,MAAM,gDAAgD,EAElE,YAAK,KAAOV,GAAQ,KACb,IACT,CAMA,SAAgC,CAC9B,OAAO,KAAK,IACd,CAMA,SAAmB,CACjB,OAAO,KAAK,gBAAgBU,CAC9B,CACF,EA7FqBf,EAAAe,EAAA,wBCCrB,IAAqBC,EAArB,KAAsC,CAC5B,KAA6B,KAC7B,KAA6B,KAC7B,MAAgB,EAMxB,SAAmB,CACjB,OAAO,KAAK,OAAS,MAAQ,KAAK,OAAS,IAC7C,CAKA,MAAe,CACb,OAAO,KAAK,KACd,CAMA,YAAYlB,EAAkC,CAC5C,IAAImB,EAAW,IAAIF,EAAqBjB,EAAO,KAAM,KAAK,IAAI,EAC9D,OAAI,KAAK,QAAQ,GACf,KAAK,KAAOmB,EACZ,KAAK,KAAO,KAAK,OAEjB,KAAK,KAAK,QAAQA,CAAQ,EAC1B,KAAK,KAAOA,GAEd,KAAK,QACE,KAAK,IACd,CAMA,WAAWnB,EAAkC,CAC3C,GAAI,KAAK,QAAQ,EACf,KAAK,YAAYA,CAAK,MACjB,CACL,IAAImB,EAAW,IAAIF,EAAqBjB,EAAO,KAAK,KAAM,IAAI,EAC9D,KAAK,KAAK,QAAQmB,CAAQ,EAC1B,KAAK,KAAOA,EACZ,KAAK,OACP,CACA,OAAO,KAAK,IACd,CAOA,SAASnB,EAAYM,EAAqC,CACxD,GAAIA,EAAQ,KAAK,MACf,MAAM,IAAI,MACR,wDAAwD,KAAK,OAC/D,EACK,GAAIA,EAAQ,EACjB,MAAM,IAAI,MACR,gEAAgE,KAAK,QACvE,EAEF,GAAI,KAAK,QAAQ,EACf,OAAO,KAAK,YAAYN,CAAK,EACxB,GAAIM,IAAU,KAAK,MACxB,OAAO,KAAK,WAAWN,CAAK,EACvB,CACL,IAAIoB,EAAU,IAAIH,EAAqBjB,EAAO,KAAM,IAAI,EACpDO,EAA6B,KAC7BF,EAAU,KAAK,KACnB,QAASG,EAAI,EAAGA,EAAIF,EAAOE,IACzBD,EAAOF,EACPA,EAAUA,EAAQ,QAAQ,EAE5B,OAAAe,EAAQ,QAAQf,CAAO,EACvBe,EAAQ,QAAQb,CAAI,EACpBA,EAAK,QAAQa,CAAO,EACpBf,EAAQ,QAAQe,CAAO,EACvB,KAAK,QACEA,CACT,CACF,CAKA,aAAoC,CAClC,GAAI,KAAK,QAAQ,EAAG,OAAO,KAC3B,IAAIC,EAAa,KAAK,KACtB,OAAI,KAAK,KAAK,QAAQ,GACpB,KAAK,KAAO,KAAK,KAAK,QAAQ,EAC9B,KAAK,KAAK,QAAQ,IAAI,IAEtB,KAAK,KAAO,KACZ,KAAK,KAAO,MAEd,KAAK,OAAS,EACPA,EAAW,QAAQ,IAAI,CAChC,CAIA,YAAmC,CACjC,GAAI,KAAK,QAAQ,EAAG,OAAO,KAC3B,IAAIA,EAAa,KAAK,KACtB,OAAI,KAAK,KAAK,QAAQ,GACpB,KAAK,KAAO,KAAK,KAAK,QAAQ,EAC9B,KAAK,KAAK,QAAQ,IAAI,IAEtB,KAAK,KAAO,KACZ,KAAK,KAAO,MAEd,KAAK,QACEA,EAAW,QAAQ,IAAI,CAChC,CAMA,SAASf,EAAqC,CAC5C,GAAIA,EAAQ,KAAK,MACf,MAAM,IAAI,MACR,wDAAwD,KAAK,OAC/D,EACK,GAAIA,EAAQ,EACjB,MAAM,IAAI,MACR,gEAAgE,KAAK,QACvE,EAEF,GAAI,KAAK,QAAQ,EACf,OAAO,KAGT,GAAIA,IAAU,EACZ,OAAO,KAAK,YAAY,EACnB,GAAIA,IAAU,KAAK,MAAQ,EAChC,OAAO,KAAK,WAAW,EAClB,CACL,IAAIgB,EAAQ,EACRZ,EAAO,KAAK,KAAK,EAAI,EACrBa,EAAM,KAAK,OAAOD,EAAQZ,GAAQ,CAAC,EACvC,GAAIJ,GAASiB,EAAK,CAEhB,IAAIC,EAAWlB,EACXD,EAAU,KAAK,KACnB,QAASG,EAAI,EAAGA,EAAIgB,EAAUhB,IAC5BH,EAAUA,EAAQ,QAAQ,EAE5B,OAAO,KAAK,OAAOA,CAAO,CAC5B,KAAO,CAEL,IAAImB,EAAWd,EAAOJ,EAClBD,EAAU,KAAK,KACnB,QAASG,EAAI,EAAGA,EAAIgB,EAAUhB,IAC5BH,EAAUA,EAAQ,QAAQ,EAE5B,OAAO,KAAK,OAAOA,CAAO,CAC5B,CACF,CACF,CAQA,OAAOO,EAAM,CACX,GAAIA,GAAQ,EAAEA,aAAgBK,GAC5B,MAAM,IAAI,MAAM,6CAA6C,EAG/D,OAAKL,EAIAA,EAAK,QAAQ,EAIbA,EAAK,QAAQ,GAIlBA,EAAK,QAAQ,EAAE,QAAQA,EAAK,QAAQ,CAAC,EACrCA,EAAK,QAAQ,EAAE,QAAQA,EAAK,QAAQ,CAAC,EACrC,KAAK,OAAS,EACPA,EAAK,QAAQ,IAAI,EAAE,QAAQ,IAAI,GAN7B,KAAK,WAAW,EAJhB,KAAK,YAAY,EAJjB,IAeX,CAQA,WAAWH,EAAI,CACb,GAAI,OAAOA,GAAO,WAChB,MAAM,IAAI,MAAM,oCAAoC,EAEtD,IAAIgB,EAAe,EACfD,EAAW,EACXnB,EAAU,KAAK,KACnB,KAAOA,aAAmBY,GAAsB,CAC9C,GAAIR,EAAGJ,EAASmB,CAAQ,EAAG,CACzB,IAAMvB,EAAOI,EAAQ,QAAQ,EAC7B,KAAK,OAAOA,CAAO,EACnBoB,GAAgB,EAChBpB,EAAUJ,CACZ,MACEI,EAAUA,EAAQ,QAAQ,EAE5BmB,GAAY,CACd,CACA,OAAOC,CACT,CAMA,QAAQhB,EAAI,CACV,GAAI,OAAOA,GAAO,WAChB,MAAM,IAAI,MAAM,iCAAiC,EAGnD,IAAIJ,EAAU,KAAK,KACfmB,EAAW,EACf,KAAOnB,aAAmBY,GACxBR,EAAGJ,EAASmB,CAAQ,EACpBA,GAAY,EACZnB,EAAUA,EAAQ,QAAQ,CAE9B,CAOA,eAAeI,EAAI,CACjB,GAAI,OAAOA,GAAO,WAChB,MAAM,IAAI,MAAM,wCAAwC,EAG1D,IAAIJ,EAAU,KAAK,KACfmB,EAAW,KAAK,MAAQ,EAC5B,KAAOnB,aAAmBY,GACxBR,EAAGJ,EAASmB,CAAQ,EACpBA,GAAY,EACZnB,EAAUA,EAAQ,QAAQ,CAE9B,CASA,KAAKI,EAAIL,EAAe,KAAK,KAAM,CACjC,GAAI,OAAOK,GAAO,WAChB,MAAM,IAAI,MAAM,8BAA8B,EAGhD,GAAIL,GAAgB,EAAEA,aAAwBa,GAC5C,MAAM,IAAI,MAAM,wDAAwD,EAG1E,IAAIZ,EAAUD,EACd,KAAOC,aAAmBY,GAAsB,CAC9C,GAAIR,EAAGJ,CAAO,EACZ,OAAOA,EAETA,EAAUA,EAAQ,QAAQ,CAC5B,CACA,OAAO,IACT,CASA,YAAYI,EAAIL,EAAe,KAAK,KAAM,CACxC,GAAI,OAAOK,GAAO,WAChB,MAAM,IAAI,MAAM,qCAAqC,EAGvD,GAAIL,GAAgB,EAAEA,aAAwBa,GAC5C,MAAM,IAAI,MACR,+DACF,EAGF,IAAIZ,EAAUD,EACd,KAAOC,aAAmBY,GAAsB,CAC9C,GAAIR,EAAGJ,CAAO,EACZ,OAAOA,EAETA,EAAUA,EAAQ,QAAQ,CAC5B,CACA,OAAO,IACT,CAQA,OAAOI,EAAI,CACT,GAAI,OAAOA,GAAO,WAChB,MAAM,IAAI,MAAM,gCAAgC,EAGlD,IAAME,EAAS,IAAIO,EACnB,YAAK,QAAQ,CAACN,EAAMY,IAAa,CAC3B,CAACf,EAAGG,EAAMY,CAAQ,GACtBb,EAAO,WAAWC,EAAK,SAAS,CAAC,CACnC,CAAC,EACMD,CACT,CAOA,OAAQ,CACN,OAAO,KAAK,IACd,CAOA,OAAQ,CACN,OAAO,KAAK,IACd,CAOA,SAAU,CACR,IAAMA,EAAS,CAAC,EAChB,YAAK,QAASC,GAASD,EAAO,KAAKC,EAAK,SAAS,CAAC,CAAC,EAC5CD,CACT,CAMA,OAAQ,CACN,KAAK,KAAO,KACZ,KAAK,KAAO,KACZ,KAAK,MAAQ,CACf,CASA,OAAO,UAAUG,EAAQ,CACvB,GAAI,CAAC,MAAM,QAAQA,CAAM,EACvB,MAAM,IAAI,MAAM,uDAAuD,EAEzE,IAAMY,EAAmB,IAAIR,EAC7B,OAAAJ,EAAO,QAASd,GAAU,CACxB0B,EAAiB,WAAW1B,CAAK,CACnC,CAAC,EACM0B,CACT,CACF,EAtYqBxB,EAAAgB,EAAA,oBCCrB,IAAqBS,EAArB,KAA2B,CACjB,SAAkD,CAAC,EACnD,QAAkB,EAM1B,YAAYC,EAAiD,CAC3D,KAAK,SAAW,CAAC,CAACA,GAAYA,GAAU,OAASA,EAAW,CAAC,CAC/D,CAMA,SAAU,CACR,OAAO,KAAK,KAAK,IAAM,CACzB,CAOA,MAAO,CACL,OAAO,KAAK,SAAS,OAAS,KAAK,OACrC,CAMA,MAAO,CACL,OAAO,KAAK,KAAK,EAAI,EAAI,KAAK,SAAS,KAAK,KAAK,EAAI,GAAK,IAC5D,CAMA,OAAQ,CACN,OAAO,KAAK,KAAK,EAAI,KAAK,SAAS,GAAK,IAC1C,CAMA,SAAU,CACR,OAAO,KAAK,MAAM,KAAK,UAAU,KAAK,SAAS,MAAM,KAAK,OAAO,CAAC,CAAC,CACrE,CAQA,UAAW,CACT,KAAK,SAAW,CAAC,CACnB,CAOA,OAAQ,CACN,OAAO,IAAID,EAAM,KAAK,QAAQ,CAAC,CACjC,CAQA,QAAQE,EAAc,CACpB,YAAK,SAAS,KAAKA,CAAO,EACnB,IACT,CAMA,KAAKA,EAAS,CACZ,OAAO,KAAK,QAAQA,CAAO,CAC7B,CAKA,SAAU,CACR,GAAI,KAAK,QAAQ,EAAG,OAAO,KAC3B,IAAMC,EAAQ,KAAK,MAAM,EAEzB,OADA,KAAK,SAAW,EACZ,KAAK,QAAU,EAAI,KAAK,SAAS,SAGrC,KAAK,SAAW,KAAK,SAAS,MAAM,KAAK,OAAO,EAChD,KAAK,QAAU,GACRA,CACT,CAMA,KAAM,CACJ,OAAO,KAAK,QAAQ,CACtB,CASA,OAAO,UAAUF,EAAiD,CAChE,OAAO,IAAID,EAAM,KAAK,MAAM,KAAK,UAAUC,CAAQ,CAAC,CAAC,CACvD,CACF,EA5HqB1B,EAAAyB,EAAA,SCArB,IAAqBI,EAArB,KAA2B,CACjB,SAAkD,CAAC,EAK3D,YAAYH,EAAiD,CAC3D,KAAK,SAAW,CAAC,CAACA,GAAYA,GAAU,OAASA,EAAW,CAAC,CAC/D,CAMA,SAAU,CACR,OAAO,KAAK,KAAK,IAAM,CACzB,CAOA,MAAO,CACL,OAAO,KAAK,SAAS,MACvB,CAOA,MAAO,CACL,OAAI,KAAK,QAAQ,EACR,KAEF,KAAK,SAAS,KAAK,KAAK,EAAI,EACrC,CAMA,SAAU,CACR,OAAO,KAAK,MAAM,KAAK,UAAU,KAAK,SAAS,MAAM,CAAC,CAAC,CACzD,CAQA,UAAW,CACT,KAAK,SAAW,CAAC,CACnB,CAOA,OAAQ,CACN,OAAO,IAAIG,EAAM,KAAK,SAAS,MAAM,CAAC,CACxC,CAOA,WAAY,CACV,OAAO,IAAIA,EAAM,KAAK,QAAQ,CAAC,CACjC,CAQA,KAAKF,EAAc,CACjB,YAAK,SAAS,KAAKA,CAAO,EACnB,IACT,CAMA,KAAM,CACJ,OAAI,KAAK,QAAQ,EAAU,KACpB,KAAK,SAAS,IAAI,CAC3B,CASA,OAAO,UAAUD,EAAiD,CAChE,OAAO,IAAIG,EAAM,KAAK,MAAM,KAAK,UAAUH,CAAQ,CAAC,CAAC,CACvD,CACF,EAzGqB1B,EAAA6B,EAAA","sourcesContent":["/**\r\n * LinkedListNode\r\n * @class\r\n *\r\n */\r\nexport default class LinkedListNode {\r\n  private value: any;\r\n  private next: LinkedListNode = null;\r\n  /**\r\n   * Create LinkedListNode\r\n   * @param  {number|string|object | any} [param]\r\n   * @param  {LinkedListNode} [next]\r\n   */\r\n  constructor(value: any, next: LinkedListNode) {\r\n    this.next = next ? next : null;\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @param {any} [value]\r\n   * @returns {LinkedListNode}\r\n   */\r\n  setValue(value: any): LinkedListNode {\r\n    this.value = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {any}\r\n   */\r\n  getValue(): any {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @param {LinkedListNode} [next]\r\n   * @returns {LinkedListNode}\r\n   */\r\n  setNext(next: LinkedListNode): LinkedListNode {\r\n    if (next && !(next instanceof LinkedListNode)) {\r\n      throw new Error(\"setNext expects a LinkedListNode or null\");\r\n    }\r\n    this.next = next || null;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {LinkedListNode}\r\n   */\r\n  getNext(): LinkedListNode {\r\n    return this.next;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {boolean}\r\n   */\r\n  hasNext(): boolean {\r\n    return this.next instanceof LinkedListNode;\r\n  }\r\n}\r\n","import LinkedListNode from \"./LinkedListNode\";\r\n/**\r\n * @class\r\n * @default count = 0\r\n * @default head = null\r\n *\r\n */\r\n\r\nexport default class LinkedList {\r\n  private count: number = 0;\r\n  private head: LinkedListNode = null;\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  isEmpty(): boolean {\r\n    return this.head === null;\r\n  }\r\n  /**\r\n   *\r\n   * @returns {number}\r\n   */\r\n  size(): number {\r\n    return this.count;\r\n  }\r\n\r\n  /**\r\n   * Insert at head of linkedlist\r\n   * @param {any} [value]\r\n   * @returns {LinkedListNode}\r\n   *\r\n   */\r\n  insertFirst(value: any): LinkedListNode {\r\n    return this.insertAt(value, 0);\r\n  }\r\n  /**\r\n   *Insert at last of linkedlist\r\n   * @param {any} [value]\r\n   * @param {LinkedListNode} [startingNode]\r\n   * @returns {LinkedListNode}\r\n   */\r\n  insertLast(value: any, startingNode?: LinkedListNode): LinkedListNode {\r\n    if (!startingNode) return this.insertAt(value, this.count);\r\n    else {\r\n      let current = startingNode;\r\n      while (current.hasNext()) {\r\n        current = current?.getNext();\r\n      }\r\n      current.setNext(new LinkedListNode(value, null));\r\n      this.count += 1;\r\n      return current.getNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Insert at index of linkedlist\r\n   * @param {any} [value]\r\n   * @param {number} [index]\r\n   * @returns {LinkedListNode}\r\n   */\r\n  insertAt(value: any, index: number): LinkedListNode {\r\n    if (index > this.count) {\r\n      throw new Error(\r\n        `.insertAt expects a index number <= linked list size ${this.count}`\r\n      );\r\n    } else if (index < 0) {\r\n      throw new Error(\r\n        `.insertAt expects a  index number >=0 a& <= linked list size ${this.count} `\r\n      );\r\n    }\r\n    if (index === 0) {\r\n      this.head = new LinkedListNode(value, this.head);\r\n      this.count += 1;\r\n      return this.head;\r\n    } else {\r\n      let current: LinkedListNode = this.head;\r\n      let prev: LinkedListNode = null;\r\n      for (let i = 0; i < index; i++) {\r\n        prev = current;\r\n        current = current.getNext();\r\n      }\r\n      prev.setNext(new LinkedListNode(value, current));\r\n      this.count++;\r\n      return prev.getNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes head of linkedlist and returns the node\r\n   * @returns {LinkedListNode}\r\n   */\r\n  removeFist(): LinkedListNode {\r\n    return this.removeAt(0);\r\n  }\r\n\r\n  /**\r\n   * @returns {LinkedListNode}\r\n   */\r\n  removeLast(): LinkedListNode {\r\n    return this.removeAt(this.count - 1);\r\n  }\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  removeAt(index: number): LinkedListNode {\r\n    if (index > this.count) {\r\n      throw new Error(\r\n        `.insertAt expects a index number <= linked list size ${this.count}`\r\n      );\r\n    } else if (index < 0) {\r\n      throw new Error(\r\n        `.insertAt expects a  index number >=0 a& <= linked list size ${this.count} `\r\n      );\r\n    }\r\n    if (this.isEmpty()) {\r\n      return null;\r\n    }\r\n    if (index === 0) {\r\n      let current = this.head;\r\n      this.head = current.getNext();\r\n      this.count--;\r\n      return current.setNext(null);\r\n    } else {\r\n      let current: LinkedListNode = this.head;\r\n      let prev: LinkedListNode = null;\r\n      for (let i = 0; i < index; i++) {\r\n        prev = current;\r\n        current = current.getNext();\r\n      }\r\n      prev.setNext(current?.hasNext() ? current.getNext() : null);\r\n      this.count--;\r\n      return prev.getNext();\r\n    }\r\n  }\r\n  /**\r\n   * clears all\r\n   */\r\n  clearAll() {\r\n    this.head = null;\r\n    this.count = 0;\r\n  }\r\n\r\n  /**\r\n   * Traverses the list from beginning to end.\r\n   * @public\r\n   * @param {function} cb\r\n   */\r\n  forEach(cb) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".forEach(cb) expects a callback\");\r\n    }\r\n\r\n    let current = this.head;\r\n    let index = 0;\r\n    while (current instanceof LinkedListNode) {\r\n      cb(current, index);\r\n      index += 1;\r\n      current = current.getNext();\r\n    }\r\n  }\r\n  /**\r\n   * Finds one node in the list based on a callback.\r\n   * @public\r\n   * @param {function} cb - callback should return true\r\n   * @param {LinkedListNode} [startingNode]\r\n   * @returns {LinkedListNode}\r\n   */\r\n  find(cb, startingNode = this.head) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".find(cb) expects a callback\");\r\n    }\r\n    if (startingNode && !this.isInstanceof(startingNode, LinkedListNode)) {\r\n      throw new Error(\".find(cb) expects to start from a LinkedListNode\");\r\n    }\r\n\r\n    let current = startingNode;\r\n    while (this.isInstanceof(current, LinkedListNode)) {\r\n      if (cb(current)) {\r\n        return current;\r\n      }\r\n      current = current.getNext();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Filters the list based on a callback.\r\n   * @public\r\n   * @param {function} cb - callback should return true for required nodes.\r\n   * @returns {LinkedList}\r\n   */\r\n  filter(cb) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".filter(cb) expects a callback\");\r\n    }\r\n    let last = null;\r\n    const result = new LinkedList();\r\n    this.forEach((node, index) => {\r\n      if (!cb(node, index)) return;\r\n      last = result.insertLast(node.getValue(), last);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Converts the linked list into an array.\r\n   * @public\r\n   * @returns {array}\r\n   */\r\n  toArray() {\r\n    const result = [];\r\n    this.forEach((node) => result.push(node.getValue()));\r\n    return result;\r\n  }\r\n  /**\r\n   * @public\r\n   * @param {any} [value]\r\n   * @param {any} [instance]\r\n   * @returns {boolean}\r\n   */\r\n  isInstanceof(value: any, instance: any): boolean {\r\n    return value instanceof instance;\r\n  }\r\n\r\n  /**\r\n   * Creates a linked list from an array\r\n   * @public\r\n   * @static\r\n   * @param {Array<any>} values\r\n   * @return {LinkedList}\r\n   */\r\n  static fromArray(values: Array<any>) {\r\n    if (!Array.isArray(values)) {\r\n      throw new Error(\"cannot create LinkedList from none-array values\");\r\n    }\r\n    const linkedList = new LinkedList();\r\n    let lastInserted = null;\r\n    values.forEach((value) => {\r\n      lastInserted = linkedList.insertLast(value, lastInserted);\r\n    });\r\n    return linkedList;\r\n  }\r\n}\r\n","/**\r\n * DoubleLinkedListNode\r\n * @class\r\n *\r\n */\r\nexport default class DoubleLinkedListNode {\r\n  private value: any;\r\n  private next: DoubleLinkedListNode = null;\r\n  private prev: DoubleLinkedListNode = null;\r\n  /**\r\n   * Create DoubleLinkedListNode\r\n   * @param  {number|string|object | any} [param]\r\n   * @param  {DoubleLinkedListNode} [next]\r\n   */\r\n  constructor(\r\n    value: any,\r\n    next: DoubleLinkedListNode,\r\n    prev: DoubleLinkedListNode\r\n  ) {\r\n    this.next = next ? next : null;\r\n    this.prev = prev ? prev : null;\r\n    this.value = value;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @param {any} [value]\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  setValue(value: any): DoubleLinkedListNode {\r\n    this.value = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {any}\r\n   */\r\n  getValue(): any {\r\n    return this.value;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @param {DoubleLinkedListNode} [next]\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  setNext(next: DoubleLinkedListNode): DoubleLinkedListNode {\r\n    if (next && !(next instanceof DoubleLinkedListNode)) {\r\n      throw new Error(\"setNext expects a DoubleLinkedListNode or null\");\r\n    }\r\n    this.next = next || null;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  getNext(): DoubleLinkedListNode {\r\n    return this.next;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {boolean}\r\n   */\r\n  hasNext(): boolean {\r\n    return this.next instanceof DoubleLinkedListNode;\r\n  }\r\n  /**\r\n   * @public\r\n   * @param {DoubleLinkedListNode} [prev]\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  setPrev(prev: DoubleLinkedListNode): DoubleLinkedListNode {\r\n    if (prev && !(prev instanceof DoubleLinkedListNode)) {\r\n      throw new Error(\"setPrev expects a DoubleLinkedListNode or null\");\r\n    }\r\n    this.prev = prev || null;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  getPrev(): DoubleLinkedListNode {\r\n    return this.prev;\r\n  }\r\n\r\n  /**\r\n   * @public\r\n   * @returns {boolean}\r\n   */\r\n  hasPrev(): boolean {\r\n    return this.prev instanceof DoubleLinkedListNode;\r\n  }\r\n}\r\n","import DoubleLinkedListNode from \"./DoubleLinkedListNode\";\r\n\r\n/**\r\n * @class\r\n *\r\n */\r\nexport default class DoubleLinkedList {\r\n  private head: DoubleLinkedListNode = null;\r\n  private tail: DoubleLinkedListNode = null;\r\n  private count: number = 0;\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  isEmpty(): boolean {\r\n    return this.head === null && this.tail === null;\r\n  }\r\n  /**\r\n   *\r\n   * @returns {number}\r\n   */\r\n  size(): number {\r\n    return this.count;\r\n  }\r\n\r\n  /** O(1)\r\n   * @param {any} [value]\r\n   * @return {DoubleLinkedListNode}\r\n   */\r\n  insertFirst(value: any): DoubleLinkedListNode {\r\n    let linkNode = new DoubleLinkedListNode(value, null, this.head);\r\n    if (this.isEmpty()) {\r\n      this.head = linkNode;\r\n      this.tail = this.head;\r\n    } else {\r\n      this.head.setPrev(linkNode);\r\n      this.head = linkNode;\r\n    }\r\n    this.count++;\r\n    return this.head;\r\n  }\r\n\r\n  /** O(1)\r\n   * @param {any} [value]\r\n   * @return {DoubleLinkedListNode}\r\n   */\r\n  insertLast(value: any): DoubleLinkedListNode {\r\n    if (this.isEmpty()) {\r\n      this.insertFirst(value);\r\n    } else {\r\n      let linkNode = new DoubleLinkedListNode(value, this.tail, null);\r\n      this.tail.setNext(linkNode);\r\n      this.tail = linkNode;\r\n      this.count++;\r\n    }\r\n    return this.tail;\r\n  }\r\n  /**\r\n   * O(n)\r\n   * @param {any} value\r\n   * @param {number} index\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  insertAt(value: any, index: number): DoubleLinkedListNode {\r\n    if (index > this.count) {\r\n      throw new Error(\r\n        `.insertAt expects a index number <= linked list size ${this.count}`\r\n      );\r\n    } else if (index < 0) {\r\n      throw new Error(\r\n        `.insertAt expects a  index number >=0 a& <= linked list size ${this.count} `\r\n      );\r\n    }\r\n    if (this.isEmpty()) {\r\n      return this.insertFirst(value);\r\n    } else if (index === this.count) {\r\n      return this.insertLast(value);\r\n    } else {\r\n      let newNode = new DoubleLinkedListNode(value, null, null);\r\n      let prev: DoubleLinkedListNode = null;\r\n      let current = this.head;\r\n      for (let i = 0; i < index; i++) {\r\n        prev = current;\r\n        current = current.getNext();\r\n      }\r\n      newNode.setNext(current);\r\n      newNode.setPrev(prev);\r\n      prev.setNext(newNode);\r\n      current.setPrev(newNode);\r\n      this.count++;\r\n      return newNode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  removeFirst(): DoubleLinkedListNode {\r\n    if (this.isEmpty()) return null;\r\n    let removeNode = this.head;\r\n    if (this.head.hasNext()) {\r\n      this.head = this.head.getNext();\r\n      this.head.setPrev(null);\r\n    } else {\r\n      this.head = null;\r\n      this.tail = null;\r\n    }\r\n    this.count -= 1;\r\n    return removeNode.setNext(null);\r\n  }\r\n  /**\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  removeLast(): DoubleLinkedListNode {\r\n    if (this.isEmpty()) return null;\r\n    let removeNode = this.tail;\r\n    if (this.tail.hasPrev()) {\r\n      this.tail = this.tail.getPrev();\r\n      this.tail.setNext(null);\r\n    } else {\r\n      this.tail = null;\r\n      this.head = null;\r\n    }\r\n    this.count--;\r\n    return removeNode.setPrev(null);\r\n  }\r\n\r\n  /**\r\n   * @param {number} [index]\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  removeAt(index: number): DoubleLinkedListNode {\r\n    if (index > this.count) {\r\n      throw new Error(\r\n        `.removeAt expects a index number <= linked list size ${this.count}`\r\n      );\r\n    } else if (index < 0) {\r\n      throw new Error(\r\n        `.removeAt expects a  index number >=0 a& <= linked list size ${this.count} `\r\n      );\r\n    }\r\n    if (this.isEmpty()) {\r\n      return null;\r\n    }\r\n\r\n    if (index === 0) {\r\n      return this.removeFirst();\r\n    } else if (index === this.count - 1) {\r\n      return this.removeLast();\r\n    } else {\r\n      let start = 0;\r\n      let last = this.size() - 1;\r\n      let mid = Math.round((start + last) / 2);\r\n      if (index <= mid) {\r\n        // from start\r\n        let position = index;\r\n        let current = this.head;\r\n        for (let i = 0; i < position; i++) {\r\n          current = current.getNext();\r\n        }\r\n        return this.remove(current);\r\n      } else {\r\n        // from end\r\n        let position = last - index;\r\n        let current = this.tail;\r\n        for (let i = 0; i < position; i++) {\r\n          current = current.getPrev();\r\n        }\r\n        return this.remove(current);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a node from the list by its reference.\r\n   * @public\r\n   * @param {DoubleLinkedListNode} node\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  remove(node) {\r\n    if (node && !(node instanceof DoubleLinkedListNode)) {\r\n      throw new Error(\"remove: expects a DoubleLinkedListNode node\");\r\n    }\r\n\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    if (!node.hasPrev()) {\r\n      return this.removeFirst();\r\n    }\r\n\r\n    if (!node.hasNext()) {\r\n      return this.removeLast();\r\n    }\r\n\r\n    node.getPrev().setNext(node.getNext());\r\n    node.getNext().setPrev(node.getPrev());\r\n    this.count -= 1;\r\n    return node.setPrev(null).setNext(null);\r\n  }\r\n\r\n  /**\r\n   * Removes all nodes based on a callback.\r\n   * @public\r\n   * @param {function} cb - if cb returns true\r\n   * @returns {number} number of removed nodes\r\n   */\r\n  removeEach(cb) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".removeEach(cb) expects a callback\");\r\n    }\r\n    let removedCount = 0;\r\n    let position = 0;\r\n    let current = this.head;\r\n    while (current instanceof DoubleLinkedListNode) {\r\n      if (cb(current, position)) {\r\n        const next = current.getNext();\r\n        this.remove(current);\r\n        removedCount += 1;\r\n        current = next;\r\n      } else {\r\n        current = current.getNext();\r\n      }\r\n      position += 1;\r\n    }\r\n    return removedCount;\r\n  }\r\n  /**\r\n   * Traverses the list from beginning to end.\r\n   * @public\r\n   * @param {function} cb\r\n   */\r\n  forEach(cb) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".forEach(cb) expects a callback\");\r\n    }\r\n\r\n    let current = this.head;\r\n    let position = 0;\r\n    while (current instanceof DoubleLinkedListNode) {\r\n      cb(current, position);\r\n      position += 1;\r\n      current = current.getNext();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traverses the list backward from end to beginning\r\n   * @public\r\n   * @param {function} cb\r\n   */\r\n  forEachReverse(cb) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".forEachReverse(cb) expects a callback\");\r\n    }\r\n\r\n    let current = this.tail;\r\n    let position = this.count - 1;\r\n    while (current instanceof DoubleLinkedListNode) {\r\n      cb(current, position);\r\n      position -= 1;\r\n      current = current.getPrev();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds a node in the list using a callback\r\n   * @public\r\n   * @param {function} cb\r\n   * @param {DoubleLinkedListNode} [startingNode]\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  find(cb, startingNode = this.head) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".find(cb) expects a callback\");\r\n    }\r\n\r\n    if (startingNode && !(startingNode instanceof DoubleLinkedListNode)) {\r\n      throw new Error(\".find(cb) expects to start from a DoubleLinkedListNode\");\r\n    }\r\n\r\n    let current = startingNode;\r\n    while (current instanceof DoubleLinkedListNode) {\r\n      if (cb(current)) {\r\n        return current;\r\n      }\r\n      current = current.getNext();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Finds a node in the list using a callback in reverse order\r\n   * @public\r\n   * @param {function} cb\r\n   * @param {DoubleLinkedListNode} [startingNode]\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  findReverse(cb, startingNode = this.tail) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".findReverse(cb) expects a callback\");\r\n    }\r\n\r\n    if (startingNode && !(startingNode instanceof DoubleLinkedListNode)) {\r\n      throw new Error(\r\n        \".findReverse(cb) expects to start from a DoubleLinkedListNode\"\r\n      );\r\n    }\r\n\r\n    let current = startingNode;\r\n    while (current instanceof DoubleLinkedListNode) {\r\n      if (cb(current)) {\r\n        return current;\r\n      }\r\n      current = current.getPrev();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Filters the list based on a callback.\r\n   * @public\r\n   * @param {function} cb\r\n   * @returns {LinkedList}\r\n   */\r\n  filter(cb) {\r\n    if (typeof cb !== \"function\") {\r\n      throw new Error(\".filter(cb) expects a callback\");\r\n    }\r\n\r\n    const result = new DoubleLinkedList();\r\n    this.forEach((node, position) => {\r\n      if (!cb(node, position)) return;\r\n      result.insertLast(node.getValue());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the head node.\r\n   * @public\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  _head() {\r\n    return this.head;\r\n  }\r\n\r\n  /**\r\n   * Returns the tail node.\r\n   * @public\r\n   * @returns {DoubleLinkedListNode}\r\n   */\r\n  _tail() {\r\n    return this.tail;\r\n  }\r\n\r\n  /**\r\n   * Converts the doubly linked list into an array.\r\n   * @public\r\n   * @returns {array}\r\n   */\r\n  toArray() {\r\n    const result = [];\r\n    this.forEach((node) => result.push(node.getValue()));\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Clears the list\r\n   * @public\r\n   */\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.count = 0;\r\n  }\r\n\r\n  /**\r\n   * Creates a doubly linked list from an array\r\n   * @public\r\n   * @static\r\n   * @param {array} values\r\n   * @return {DoublyLinkedList}\r\n   */\r\n  static fromArray(values) {\r\n    if (!Array.isArray(values)) {\r\n      throw new Error(\"cannot create DoublyLinkedList from none-array values\");\r\n    }\r\n    const doublyLinkedList = new DoubleLinkedList();\r\n    values.forEach((value) => {\r\n      doublyLinkedList.insertLast(value);\r\n    });\r\n    return doublyLinkedList;\r\n  }\r\n}\r\n","/**\r\n * @class\r\n *\r\n * Last in last out\r\n * example booking a ticket fro trian etc\r\n * it is a linear data structure like array unlike array insertion happens at last end and delettion happens at start\r\n */\r\nexport default class Queue {\r\n  private elements: Array<number | string | object | any> = [];\r\n  private _offset: number = 0;\r\n\r\n  /**\r\n   * Creates a Queue.\r\n   * @param {array} [elements]\r\n   */\r\n  constructor(elements: Array<number | string | object | any>) {\r\n    this.elements = !!elements && elements?.length ? elements : [];\r\n  }\r\n  /**\r\n   * Checks if the queue is empty.\r\n   * @public\r\n   * @returns {boolean}\r\n   */\r\n  isEmpty() {\r\n    return this.size() === 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements in the queue.\r\n   * @public\r\n   * @returns {number}\r\n   */\r\n  size() {\r\n    return this.elements.length - this._offset;\r\n  }\r\n  /**\r\n   * Returns the back element of the queue.\r\n   * @public\r\n   * @returns {number|string|object|any}\r\n   */\r\n  back() {\r\n    return this.size() > 0 ? this.elements[this.size() - 1] : null;\r\n  }\r\n  /**\r\n   * Returns the front element of the queue.\r\n   * @public\r\n   * @returns {number|string|object|any}\r\n   */\r\n  front() {\r\n    return this.size() ? this.elements[0] : null;\r\n  }\r\n  /**\r\n   * Returns the remaining elements as an array with deep clone from queue.\r\n   * @public\r\n   * @returns {Array<number | string | object | any>}\r\n   */\r\n  toArray() {\r\n    return JSON.parse(JSON.stringify(this.elements.slice(this._offset)));\r\n  }\r\n\r\n  /**\r\n   * Clears all the elements in the queue\r\n   * @public\r\n   *\r\n   */\r\n\r\n  clearAll() {\r\n    this.elements = [];\r\n  }\r\n\r\n  /**\r\n   * Creates a shallow copy from the queue.\r\n   * @public\r\n   * @return {Queue}\r\n   */\r\n  clone() {\r\n    return new Queue(this.toArray());\r\n  }\r\n\r\n  /**\r\n   * Adds an element to the back of the queue.\r\n   * @public\r\n   * @param {number|string|object|any} [element]\r\n   *\r\n   */\r\n  enqueue(element: any) {\r\n    this.elements.push(element);\r\n    return this;\r\n  }\r\n  /**\r\n   * Adds an element to the back of the queue.\r\n   * @public\r\n   * @param {number|string|object|any} element\r\n   */\r\n  push(element) {\r\n    return this.enqueue(element);\r\n  }\r\n  /**\r\n   *\r\n   * @returns {number|string|object|any}\r\n   */\r\n  dequeue() {\r\n    if (this.isEmpty()) return null;\r\n    const first = this.front();\r\n    this._offset += 1;\r\n    if (this._offset * 2 < this.elements.length) return first;\r\n    // only remove dequeued elements when reaching half size\r\n    // to decrease latency of shifting elements.\r\n    this.elements = this.elements.slice(this._offset);\r\n    this._offset = 0;\r\n    return first;\r\n  }\r\n  /**\r\n   * Removes and returns the first element in the queue using shift O(n).\r\n   * @public\r\n   * @returns {number|string|object|any}\r\n   */\r\n  pop() {\r\n    return this.dequeue();\r\n  }\r\n\r\n  /**\r\n   * Creates a queue from an existing array with deepclone\r\n   * @public\r\n   * @static\r\n   * @param {Array<number|string|object|any>} [elements]\r\n   * @return {Queue}\r\n   */\r\n  static fromArray(elements: Array<number | string | object | any>) {\r\n    return new Queue(JSON.parse(JSON.stringify(elements)));\r\n  }\r\n}\r\n","/**\r\n * @class\r\n *\r\n * Last in First out\r\n * example stack of books in box, etc\r\n * it is a linear data structure like array unlike array insertion and removes happens only in single end\r\n */\r\nexport default class Stack {\r\n  private elements: Array<number | string | object | any> = [];\r\n  /**\r\n   * Creates a stack.\r\n   * @param {array} [elements]\r\n   */\r\n  constructor(elements: Array<number | string | object | any>) {\r\n    this.elements = !!elements && elements?.length ? elements : [];\r\n  }\r\n  /**\r\n   * Checks if the stack is empty.\r\n   * @public\r\n   * @returns {boolean}\r\n   */\r\n  isEmpty() {\r\n    return this.size() === 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements in the stack.\r\n   * @public\r\n   * @returns {number}\r\n   */\r\n  size() {\r\n    return this.elements.length;\r\n  }\r\n\r\n  /**\r\n   * Returns the top element in the stack.\r\n   * @public\r\n   * @returns {number|string|object|any}\r\n   */\r\n  peek() {\r\n    if (this.isEmpty()) {\r\n      return null;\r\n    }\r\n    return this.elements[this.size() - 1];\r\n  }\r\n  /**\r\n   * Returns the remaining elements as an array with deep clone (structuredClone).\r\n   * @public\r\n   * @returns {Array<number | string | object | any>}\r\n   */\r\n  toArray() {\r\n    return JSON.parse(JSON.stringify(this.elements.slice()));\r\n  }\r\n\r\n  /**\r\n   * Clears all the elements in the stack\r\n   * @public\r\n   *\r\n   */\r\n\r\n  clearAll() {\r\n    this.elements = [];\r\n  }\r\n\r\n  /**\r\n   * Creates a shallow copy from the stack.\r\n   * @public\r\n   * @return {Stack}\r\n   */\r\n  clone() {\r\n    return new Stack(this.elements.slice());\r\n  }\r\n\r\n  /**\r\n   * Creates a deep copy from the stack.\r\n   * @public\r\n   * @return {Stack}\r\n   */\r\n  deepclone() {\r\n    return new Stack(this.toArray());\r\n  }\r\n\r\n  /**\r\n   * Inset element  into stack\r\n   * @public\r\n   * @param {number|string|object|any} [element]\r\n   *\r\n   */\r\n  push(element: any) {\r\n    this.elements.push(element);\r\n    return this;\r\n  }\r\n  /**\r\n   * Removes and returns the top element in the stack.\r\n   * @public\r\n   * @returns {number|string|object|any}\r\n   */\r\n  pop() {\r\n    if (this.isEmpty()) return null;\r\n    return this.elements.pop();\r\n  }\r\n\r\n  /**\r\n   * Creates a stack from an existing array with deepclone\r\n   * @public\r\n   * @static\r\n   * @param {Array<number | string | object | any>} [elements]\r\n   * @return {Stack}\r\n   */\r\n  static fromArray(elements: Array<number | string | object | any>) {\r\n    return new Stack(JSON.parse(JSON.stringify(elements)));\r\n  }\r\n}\r\n"]}