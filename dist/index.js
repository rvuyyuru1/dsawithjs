'use strict';

var p=Object.defineProperty;var o=(m,e)=>p(m,"name",{value:e,configurable:!0});var l=class{value;next=null;constructor(e,t){this.next=t||null,this.value=e;}setValue(e){return this.value=e,this}getValue(){return this.value}setNext(e){if(e&&!(e instanceof l))throw new Error("setNext expects a LinkedListNode or null");return this.next=e||null,this}getNext(){return this.next}hasNext(){return this.next instanceof l}};o(l,"LinkedListNode");var a=class{count=0;head=null;isEmpty(){return this.head===null}size(){return this.count}insertFirst(e){return this.insertAt(e,0)}insertLast(e,t){if(t){let r=t;for(;r.hasNext();)r=r?.getNext();return r.setNext(new l(e,null)),this.count+=1,r.getNext()}else return this.insertAt(e,this.count)}insertAt(e,t){if(t>this.count)throw new Error(`.insertAt expects a index number <= linked list size ${this.count}`);if(t<0)throw new Error(`.insertAt expects a  index number >=0 a& <= linked list size ${this.count} `);if(t===0)return this.head=new l(e,this.head),this.count+=1,this.head;{let r=this.head,i=null;for(let n=0;n<t;n++)i=r,r=r.getNext();return i.setNext(new l(e,r)),this.count++,i.getNext()}}removeFist(){return this.removeAt(0)}removeLast(){return this.removeAt(this.count-1)}removeAt(e){if(e>this.count)throw new Error(`.insertAt expects a index number <= linked list size ${this.count}`);if(e<0)throw new Error(`.insertAt expects a  index number >=0 a& <= linked list size ${this.count} `);if(this.isEmpty())return null;if(e===0){let t=this.head;return this.head=t.getNext(),this.count--,t.setNext(null)}else {let t=this.head,r=null;for(let i=0;i<e;i++)r=t,t=t.getNext();return r.setNext(t?.hasNext()?t.getNext():null),this.count--,r.getNext()}}clearAll(){this.head=null,this.count=0;}forEach(e){if(typeof e!="function")throw new Error(".forEach(cb) expects a callback");let t=this.head,r=0;for(;t instanceof l;)e(t,r),r+=1,t=t.getNext();}find(e,t=this.head){if(typeof e!="function")throw new Error(".find(cb) expects a callback");if(t&&!this.isInstanceof(t,l))throw new Error(".find(cb) expects to start from a LinkedListNode");let r=t;for(;this.isInstanceof(r,l);){if(e(r))return r;r=r.getNext();}return null}filter(e){if(typeof e!="function")throw new Error(".filter(cb) expects a callback");let t=null,r=new a;return this.forEach((i,n)=>{!e(i,n)||(t=r.insertLast(i.getValue(),t));}),r}toArray(){let e=[];return this.forEach(t=>e.push(t.getValue())),e}isInstanceof(e,t){return e instanceof t}static fromArray(e){if(!Array.isArray(e))throw new Error("cannot create LinkedList from none-array values");let t=new a,r=null;return e.forEach(i=>{r=t.insertLast(i,r);}),t}};o(a,"LinkedList");var s=class{value;next=null;prev=null;constructor(e,t,r){this.next=t||null,this.prev=r||null,this.value=e;}setValue(e){return this.value=e,this}getValue(){return this.value}setNext(e){if(e&&!(e instanceof s))throw new Error("setNext expects a DoubleLinkedListNode or null");return this.next=e||null,this}getNext(){return this.next}hasNext(){return this.next instanceof s}setPrev(e){if(e&&!(e instanceof s))throw new Error("setPrev expects a DoubleLinkedListNode or null");return this.prev=e||null,this}getPrev(){return this.prev}hasPrev(){return this.prev instanceof s}};o(s,"DoubleLinkedListNode");var c=class{head=null;tail=null;count=0;isEmpty(){return this.head===null&&this.tail===null}size(){return this.count}insertFirst(e){let t=new s(e,null,this.head);return this.isEmpty()?(this.head=t,this.tail=this.head):(this.head.setPrev(t),this.head=t),this.count++,this.head}insertLast(e){if(this.isEmpty())this.insertFirst(e);else {let t=new s(e,this.tail,null);this.tail.setNext(t),this.tail=t,this.count++;}return this.tail}insertAt(e,t){if(t>this.count)throw new Error(`.insertAt expects a index number <= linked list size ${this.count}`);if(t<0)throw new Error(`.insertAt expects a  index number >=0 a& <= linked list size ${this.count} `);if(this.isEmpty())return this.insertFirst(e);if(t===this.count)return this.insertLast(e);{let r=new s(e,null,null),i=null,n=this.head;for(let u=0;u<t;u++)i=n,n=n.getNext();return r.setNext(n),r.setPrev(i),i.setNext(r),n.setPrev(r),this.count++,r}}removeFirst(){if(this.isEmpty())return null;let e=this.head;return this.head.hasNext()?(this.head=this.head.getNext(),this.head.setPrev(null)):(this.head=null,this.tail=null),this.count-=1,e.setNext(null)}removeLast(){if(this.isEmpty())return null;let e=this.tail;return this.tail.hasPrev()?(this.tail=this.tail.getPrev(),this.tail.setNext(null)):(this.tail=null,this.head=null),this.count--,e.setPrev(null)}removeAt(e){if(e>this.count)throw new Error(`.removeAt expects a index number <= linked list size ${this.count}`);if(e<0)throw new Error(`.removeAt expects a  index number >=0 a& <= linked list size ${this.count} `);if(this.isEmpty())return null;if(e===0)return this.removeFirst();if(e===this.count-1)return this.removeLast();{let t=0,r=this.size()-1,i=Math.round((t+r)/2);if(e<=i){let n=e,u=this.head;for(let d=0;d<n;d++)u=u.getNext();return this.remove(u)}else {let n=r-e,u=this.tail;for(let d=0;d<n;d++)u=u.getPrev();return this.remove(u)}}}remove(e){if(e&&!(e instanceof s))throw new Error("remove: expects a DoubleLinkedListNode node");return e?e.hasPrev()?e.hasNext()?(e.getPrev().setNext(e.getNext()),e.getNext().setPrev(e.getPrev()),this.count-=1,e.setPrev(null).setNext(null)):this.removeLast():this.removeFirst():null}removeEach(e){if(typeof e!="function")throw new Error(".removeEach(cb) expects a callback");let t=0,r=0,i=this.head;for(;i instanceof s;){if(e(i,r)){let n=i.getNext();this.remove(i),t+=1,i=n;}else i=i.getNext();r+=1;}return t}forEach(e){if(typeof e!="function")throw new Error(".forEach(cb) expects a callback");let t=this.head,r=0;for(;t instanceof s;)e(t,r),r+=1,t=t.getNext();}forEachReverse(e){if(typeof e!="function")throw new Error(".forEachReverse(cb) expects a callback");let t=this.tail,r=this.count-1;for(;t instanceof s;)e(t,r),r-=1,t=t.getPrev();}find(e,t=this.head){if(typeof e!="function")throw new Error(".find(cb) expects a callback");if(t&&!(t instanceof s))throw new Error(".find(cb) expects to start from a DoubleLinkedListNode");let r=t;for(;r instanceof s;){if(e(r))return r;r=r.getNext();}return null}findReverse(e,t=this.tail){if(typeof e!="function")throw new Error(".findReverse(cb) expects a callback");if(t&&!(t instanceof s))throw new Error(".findReverse(cb) expects to start from a DoubleLinkedListNode");let r=t;for(;r instanceof s;){if(e(r))return r;r=r.getPrev();}return null}filter(e){if(typeof e!="function")throw new Error(".filter(cb) expects a callback");let t=new c;return this.forEach((r,i)=>{!e(r,i)||t.insertLast(r.getValue());}),t}_head(){return this.head}_tail(){return this.tail}toArray(){let e=[];return this.forEach(t=>e.push(t.getValue())),e}clear(){this.head=null,this.tail=null,this.count=0;}static fromArray(e){if(!Array.isArray(e))throw new Error("cannot create DoublyLinkedList from none-array values");let t=new c;return e.forEach(r=>{t.insertLast(r);}),t}};o(c,"DoubleLinkedList");var f=class{elements=[];_offset=0;constructor(e){this.elements=!!e&&e?.length?e:[];}isEmpty(){return this.size()===0}size(){return this.elements.length-this._offset}back(){return this.size()>0?this.elements[this.size()-1]:null}front(){return this.size()?this.elements[0]:null}toArray(){return JSON.parse(JSON.stringify(this.elements.slice(this._offset)))}clearAll(){this.elements=[];}clone(){return new f(this.toArray())}enqueue(e){return this.elements.push(e),this}push(e){return this.enqueue(e)}dequeue(){if(this.isEmpty())return null;let e=this.front();return this._offset+=1,this._offset*2<this.elements.length||(this.elements=this.elements.slice(this._offset),this._offset=0),e}pop(){return this.dequeue()}static fromArray(e){return new f(JSON.parse(JSON.stringify(e)))}};o(f,"Queue");var h=class{elements=[];constructor(e){this.elements=!!e&&e?.length?e:[];}isEmpty(){return this.size()===0}size(){return this.elements.length}peek(){return this.isEmpty()?null:this.elements[this.size()-1]}toArray(){return JSON.parse(JSON.stringify(this.elements.slice()))}clearAll(){this.elements=[];}clone(){return new h(this.elements.slice())}deepclone(){return new h(this.toArray())}push(e){return this.elements.push(e),this}pop(){return this.isEmpty()?null:this.elements.pop()}static fromArray(e){return new h(JSON.parse(JSON.stringify(e)))}};o(h,"Stack");

exports.DoubleLinkedList = c;
exports.DoubleLinkedListNode = s;
exports.LinkedList = a;
exports.LinkedListNode = l;
exports.Queue = f;
exports.Stack = h;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map